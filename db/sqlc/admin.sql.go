// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listAttorneys = `-- name: ListAttorneys :many
WITH conn AS (
    SELECT
        user_id,
        COUNT(*) AS total_connections
    FROM (
             SELECT sender_id AS user_id FROM connections
             UNION ALL
             SELECT recipient_id AS user_id FROM connections
         ) AS all_connections
    GROUP BY user_id
)
SELECT
    u.user_id,
    u.first_name,
    u.last_name,
    u.practice_area,
    u.practice_location,
    p.price_id,
    p.service_type,
    p.per_hour_price,
    p.per_hearing_price,
    p.contingency_price,
    p.hybrid_price,
    COALESCE(conn.total_connections, 0) AS total_connections
FROM
    users u
        LEFT JOIN conn ON u.user_id = conn.user_id
        LEFT JOIN pricing p ON u.user_id = p.user_id
ORDER BY
    u.user_id
LIMIT $1
OFFSET $2
`

type ListAttorneysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAttorneysRow struct {
	UserID           string         `json:"user_id"`
	FirstName        string         `json:"first_name"`
	LastName         string         `json:"last_name"`
	PracticeArea     *string        `json:"practice_area"`
	PracticeLocation *string        `json:"practice_location"`
	PriceID          *int64         `json:"price_id"`
	ServiceType      *string        `json:"service_type"`
	PerHourPrice     pgtype.Numeric `json:"per_hour_price"`
	PerHearingPrice  pgtype.Numeric `json:"per_hearing_price"`
	ContingencyPrice *string        `json:"contingency_price"`
	HybridPrice      *string        `json:"hybrid_price"`
	TotalConnections int64          `json:"total_connections"`
}

func (q *Queries) ListAttorneys(ctx context.Context, arg ListAttorneysParams) ([]ListAttorneysRow, error) {
	rows, err := q.db.Query(ctx, listAttorneys, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAttorneysRow{}
	for rows.Next() {
		var i ListAttorneysRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.PracticeArea,
			&i.PracticeLocation,
			&i.PriceID,
			&i.ServiceType,
			&i.PerHourPrice,
			&i.PerHearingPrice,
			&i.ContingencyPrice,
			&i.HybridPrice,
			&i.TotalConnections,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
