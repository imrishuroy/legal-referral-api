// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: opt.sql

package db

import (
	"context"
)

const deleteOTP = `-- name: DeleteOTP :exec
DELETE FROM otps
WHERE session_id = $1
`

func (q *Queries) DeleteOTP(ctx context.Context, sessionID int64) error {
	_, err := q.db.Exec(ctx, deleteOTP, sessionID)
	return err
}

const getOTP = `-- name: GetOTP :one
SELECT session_id, user_id, channel, created_at, otp FROM otps
WHERE session_id = $1
`

func (q *Queries) GetOTP(ctx context.Context, sessionID int64) (Otp, error) {
	row := q.db.QueryRow(ctx, getOTP, sessionID)
	var i Otp
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.Channel,
		&i.CreatedAt,
		&i.Otp,
	)
	return i, err
}

const storeOTP = `-- name: StoreOTP :one
INSERT INTO otps (
    user_id,
    channel,
    otp
) VALUES (
   $1, $2, $3
) RETURNING session_id
`

type StoreOTPParams struct {
	UserID  string `json:"user_id"`
	Channel string `json:"channel"`
	Otp     int32  `json:"otp"`
}

func (q *Queries) StoreOTP(ctx context.Context, arg StoreOTPParams) (int64, error) {
	row := q.db.QueryRow(ctx, storeOTP, arg.UserID, arg.Channel, arg.Otp)
	var session_id int64
	err := row.Scan(&session_id)
	return session_id, err
}
