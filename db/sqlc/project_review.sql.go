// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: project_review.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProjectReview = `-- name: CreateProjectReview :one
INSERT INTO project_reviews (
    project_id,
    user_id,
    review,
    rating
) VALUES (
    $1, $2, $3, $4
) RETURNING review_id, project_id, user_id, review, rating, created_at
`

type CreateProjectReviewParams struct {
	ProjectID int32          `json:"project_id"`
	UserID    string         `json:"user_id"`
	Review    string         `json:"review"`
	Rating    pgtype.Numeric `json:"rating"`
}

func (q *Queries) CreateProjectReview(ctx context.Context, arg CreateProjectReviewParams) (ProjectReview, error) {
	row := q.db.QueryRow(ctx, createProjectReview,
		arg.ProjectID,
		arg.UserID,
		arg.Review,
		arg.Rating,
	)
	var i ProjectReview
	err := row.Scan(
		&i.ReviewID,
		&i.ProjectID,
		&i.UserID,
		&i.Review,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const getProjectReview = `-- name: GetProjectReview :one
SELECT review_id, project_id, user_id, review, rating, created_at
FROM project_reviews
WHERE project_id = $1 AND user_id = $2
`

type GetProjectReviewParams struct {
	ProjectID int32  `json:"project_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) GetProjectReview(ctx context.Context, arg GetProjectReviewParams) (ProjectReview, error) {
	row := q.db.QueryRow(ctx, getProjectReview, arg.ProjectID, arg.UserID)
	var i ProjectReview
	err := row.Scan(
		&i.ReviewID,
		&i.ProjectID,
		&i.UserID,
		&i.Review,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}
