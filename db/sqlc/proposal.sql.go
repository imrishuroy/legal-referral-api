// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: proposal.sql

package db

import (
	"context"
)

const createProposal = `-- name: CreateProposal :one
INSERT INTO proposals (
    project_id,
    user_id,
    title,
    proposal,
    status
) VALUES (
    $1, $2, $3, $4, 'active'
) RETURNING proposal_id, project_id, user_id, title, proposal, status, created_at, updated_at
`

type CreateProposalParams struct {
	ProjectID int32  `json:"project_id"`
	UserID    string `json:"user_id"`
	Title     string `json:"title"`
	Proposal  string `json:"proposal"`
}

func (q *Queries) CreateProposal(ctx context.Context, arg CreateProposalParams) (Proposal, error) {
	row := q.db.QueryRow(ctx, createProposal,
		arg.ProjectID,
		arg.UserID,
		arg.Title,
		arg.Proposal,
	)
	var i Proposal
	err := row.Scan(
		&i.ProposalID,
		&i.ProjectID,
		&i.UserID,
		&i.Title,
		&i.Proposal,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProposal = `-- name: GetProposal :one
SELECT proposal_id, project_id, user_id, title, proposal, status, created_at, updated_at
FROM proposals
WHERE project_id = $1 AND user_id = $2
`

type GetProposalParams struct {
	ProjectID int32  `json:"project_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) GetProposal(ctx context.Context, arg GetProposalParams) (Proposal, error) {
	row := q.db.QueryRow(ctx, getProposal, arg.ProjectID, arg.UserID)
	var i Proposal
	err := row.Scan(
		&i.ProposalID,
		&i.ProjectID,
		&i.UserID,
		&i.Title,
		&i.Proposal,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProposal = `-- name: UpdateProposal :one
UPDATE proposals
SET
    title = $3,
    proposal = $4
WHERE proposal_id = $1 AND user_id = $2
RETURNING proposal_id, project_id, user_id, title, proposal, status, created_at, updated_at
`

type UpdateProposalParams struct {
	ProposalID int32  `json:"proposal_id"`
	UserID     string `json:"user_id"`
	Title      string `json:"title"`
	Proposal   string `json:"proposal"`
}

func (q *Queries) UpdateProposal(ctx context.Context, arg UpdateProposalParams) (Proposal, error) {
	row := q.db.QueryRow(ctx, updateProposal,
		arg.ProposalID,
		arg.UserID,
		arg.Title,
		arg.Proposal,
	)
	var i Proposal
	err := row.Scan(
		&i.ProposalID,
		&i.ProjectID,
		&i.UserID,
		&i.Title,
		&i.Proposal,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
