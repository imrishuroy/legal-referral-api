// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post_statistics.sql

package db

import (
	"context"
)

const decrementLikes = `-- name: DecrementLikes :exec
UPDATE post_statistics SET likes = likes - 1 WHERE post_id = $1
`

func (q *Queries) DecrementLikes(ctx context.Context, postID int32) error {
	_, err := q.db.Exec(ctx, decrementLikes, postID)
	return err
}

const getPostStats = `-- name: GetPostStats :one
SELECT post_id, views, likes, comments, shares, updated_at FROM post_statistics WHERE post_id = $1
`

func (q *Queries) GetPostStats(ctx context.Context, postID int32) (PostStatistic, error) {
	row := q.db.QueryRow(ctx, getPostStats, postID)
	var i PostStatistic
	err := row.Scan(
		&i.PostID,
		&i.Views,
		&i.Likes,
		&i.Comments,
		&i.Shares,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementComments = `-- name: IncrementComments :exec
INSERT INTO post_statistics (post_id, comments, updated_at)
VALUES ($1, 1, CURRENT_TIMESTAMP)
ON CONFLICT (post_id)
    DO UPDATE SET comments = post_statistics.comments + 1,
    updated_at = CURRENT_TIMESTAMP
`

func (q *Queries) IncrementComments(ctx context.Context, postID int32) error {
	_, err := q.db.Exec(ctx, incrementComments, postID)
	return err
}

const incrementLikes = `-- name: IncrementLikes :exec
INSERT INTO post_statistics (post_id, likes, updated_at)
VALUES ($1, 1, CURRENT_TIMESTAMP)
ON CONFLICT (post_id)
    DO UPDATE SET likes = post_statistics.likes + 1,
    updated_at = CURRENT_TIMESTAMP
`

func (q *Queries) IncrementLikes(ctx context.Context, postID int32) error {
	_, err := q.db.Exec(ctx, incrementLikes, postID)
	return err
}
