// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post.sql

package db

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    owner_id,
    content,
    media,
    post_type,
    poll_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING post_id, owner_id, content, media, post_type, poll_id, created_at
`

type CreatePostParams struct {
	OwnerID  string   `json:"owner_id"`
	Content  *string  `json:"content"`
	Media    []string `json:"media"`
	PostType PostType `json:"post_type"`
	PollID   *int32   `json:"poll_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.OwnerID,
		arg.Content,
		arg.Media,
		arg.PostType,
		arg.PollID,
	)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.OwnerID,
		&i.Content,
		&i.Media,
		&i.PostType,
		&i.PollID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE post_id = $1 AND owner_id = $2
`

type DeletePostParams struct {
	PostID  int32  `json:"post_id"`
	OwnerID string `json:"owner_id"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.Exec(ctx, deletePost, arg.PostID, arg.OwnerID)
	return err
}

const getPosIsLikedByCurrentUser = `-- name: GetPosIsLikedByCurrentUser :one
SELECT
    CASE WHEN like_id IS NOT NULL THEN true ELSE false END AS is_liked
FROM likes
WHERE post_id = $1 AND user_id = $2 AND type = 'post'
`

type GetPosIsLikedByCurrentUserParams struct {
	PostID *int32 `json:"post_id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetPosIsLikedByCurrentUser(ctx context.Context, arg GetPosIsLikedByCurrentUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, getPosIsLikedByCurrentUser, arg.PostID, arg.UserID)
	var is_liked bool
	err := row.Scan(&is_liked)
	return is_liked, err
}

const getPost = `-- name: GetPost :one
SELECT
    posts.post_id,
    posts.owner_id,
    posts.content,
    posts.media,
    posts.post_type,
    posts.poll_id,
    posts.created_at
FROM posts
WHERE posts.post_id = $1
`

func (q *Queries) GetPost(ctx context.Context, postID int32) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.OwnerID,
		&i.Content,
		&i.Media,
		&i.PostType,
		&i.PollID,
		&i.CreatedAt,
	)
	return i, err
}

const getPostLikesAndCommentsCount = `-- name: GetPostLikesAndCommentsCount :one
SELECT
    COALESCE(likes_counts.likes_count, 0) AS likes_count,
    COALESCE(comments_counts.comments_count, 0) AS comments_count
FROM posts
            LEFT JOIN (
        SELECT
            post_id,
            COUNT(*) AS likes_count
        FROM likes
        WHERE type = 'post'
        GROUP BY post_id
    ) likes_counts ON posts.post_id = likes_counts.post_id
            LEFT JOIN (
        SELECT
            post_id,
            COUNT(*) AS comments_count
        FROM comments
        GROUP BY post_id
    ) comments_counts ON posts.post_id = comments_counts.post_id
    WHERE posts.post_id = $1
`

type GetPostLikesAndCommentsCountRow struct {
	LikesCount    int64 `json:"likes_count"`
	CommentsCount int64 `json:"comments_count"`
}

func (q *Queries) GetPostLikesAndCommentsCount(ctx context.Context, postID int32) (GetPostLikesAndCommentsCountRow, error) {
	row := q.db.QueryRow(ctx, getPostLikesAndCommentsCount, postID)
	var i GetPostLikesAndCommentsCountRow
	err := row.Scan(&i.LikesCount, &i.CommentsCount)
	return i, err
}

const getPostV2 = `-- name: GetPostV2 :one
SELECT
    posts.post_id,
    posts.owner_id,
    users.first_name as owner_first_name,
    users.last_name as owner_last_name,
    users.avatar_url as owner_avatar_url,
    users.practice_area as owner_practice_area,
    posts.content,
    posts.media,
    posts.post_type,
    posts.poll_id,
    posts.created_at
FROM posts
JOIN users ON posts.owner_id = users.user_id
WHERE posts.post_id = $1
`

type GetPostV2Row struct {
	PostID            int32     `json:"post_id"`
	OwnerID           string    `json:"owner_id"`
	OwnerFirstName    string    `json:"owner_first_name"`
	OwnerLastName     string    `json:"owner_last_name"`
	OwnerAvatarUrl    *string   `json:"owner_avatar_url"`
	OwnerPracticeArea *string   `json:"owner_practice_area"`
	Content           *string   `json:"content"`
	Media             []string  `json:"media"`
	PostType          PostType  `json:"post_type"`
	PollID            *int32    `json:"poll_id"`
	CreatedAt         time.Time `json:"created_at"`
}

func (q *Queries) GetPostV2(ctx context.Context, postID int32) (GetPostV2Row, error) {
	row := q.db.QueryRow(ctx, getPostV2, postID)
	var i GetPostV2Row
	err := row.Scan(
		&i.PostID,
		&i.OwnerID,
		&i.OwnerFirstName,
		&i.OwnerLastName,
		&i.OwnerAvatarUrl,
		&i.OwnerPracticeArea,
		&i.Content,
		&i.Media,
		&i.PostType,
		&i.PollID,
		&i.CreatedAt,
	)
	return i, err
}

const searchPosts = `-- name: SearchPosts :many
SELECT
    posts.post_id,
    posts.owner_id,
    users.first_name as owner_first_name,
    users.last_name as owner_last_name,
    users.avatar_url as owner_avatar_url,
    users.practice_area as owner_practice_area,
    posts.content,
    posts.media,
    posts.post_type,
    posts.poll_id,
    posts.created_at
FROM posts
JOIN users ON posts.owner_id = users.user_id
WHERE posts.content ILIKE '%' || $3::text || '%'
ORDER BY posts.created_at DESC
LIMIT $1
OFFSET $2
`

type SearchPostsParams struct {
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
	Searchquery string `json:"searchquery"`
}

type SearchPostsRow struct {
	PostID            int32     `json:"post_id"`
	OwnerID           string    `json:"owner_id"`
	OwnerFirstName    string    `json:"owner_first_name"`
	OwnerLastName     string    `json:"owner_last_name"`
	OwnerAvatarUrl    *string   `json:"owner_avatar_url"`
	OwnerPracticeArea *string   `json:"owner_practice_area"`
	Content           *string   `json:"content"`
	Media             []string  `json:"media"`
	PostType          PostType  `json:"post_type"`
	PollID            *int32    `json:"poll_id"`
	CreatedAt         time.Time `json:"created_at"`
}

func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]SearchPostsRow, error) {
	rows, err := q.db.Query(ctx, searchPosts, arg.Limit, arg.Offset, arg.Searchquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchPostsRow{}
	for rows.Next() {
		var i SearchPostsRow
		if err := rows.Scan(
			&i.PostID,
			&i.OwnerID,
			&i.OwnerFirstName,
			&i.OwnerLastName,
			&i.OwnerAvatarUrl,
			&i.OwnerPracticeArea,
			&i.Content,
			&i.Media,
			&i.PostType,
			&i.PollID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
