// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: education.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEducation = `-- name: AddEducation :one
INSERT INTO educations (
    user_id,
    school,
    degree,
    field_of_study,
    start_date,
    end_date,
    current,
    grade,
    achievements,
    skills
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING education_id, user_id, school, degree, field_of_study, start_date, end_date, current, grade, achievements, skills
`

type AddEducationParams struct {
	UserID       string      `json:"user_id"`
	School       string      `json:"school"`
	Degree       string      `json:"degree"`
	FieldOfStudy string      `json:"field_of_study"`
	StartDate    pgtype.Date `json:"start_date"`
	EndDate      pgtype.Date `json:"end_date"`
	Current      bool        `json:"current"`
	Grade        string      `json:"grade"`
	Achievements string      `json:"achievements"`
	Skills       []string    `json:"skills"`
}

func (q *Queries) AddEducation(ctx context.Context, arg AddEducationParams) (Education, error) {
	row := q.db.QueryRow(ctx, addEducation,
		arg.UserID,
		arg.School,
		arg.Degree,
		arg.FieldOfStudy,
		arg.StartDate,
		arg.EndDate,
		arg.Current,
		arg.Grade,
		arg.Achievements,
		arg.Skills,
	)
	var i Education
	err := row.Scan(
		&i.EducationID,
		&i.UserID,
		&i.School,
		&i.Degree,
		&i.FieldOfStudy,
		&i.StartDate,
		&i.EndDate,
		&i.Current,
		&i.Grade,
		&i.Achievements,
		&i.Skills,
	)
	return i, err
}

const deleteEducation = `-- name: DeleteEducation :exec
DELETE FROM educations
WHERE education_id = $1
`

func (q *Queries) DeleteEducation(ctx context.Context, educationID int64) error {
	_, err := q.db.Exec(ctx, deleteEducation, educationID)
	return err
}

const listEducations = `-- name: ListEducations :many
SELECT education_id, user_id, school, degree, field_of_study, start_date, end_date, current, grade, achievements, skills FROM educations WHERE user_id = $1
`

func (q *Queries) ListEducations(ctx context.Context, userID string) ([]Education, error) {
	rows, err := q.db.Query(ctx, listEducations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Education{}
	for rows.Next() {
		var i Education
		if err := rows.Scan(
			&i.EducationID,
			&i.UserID,
			&i.School,
			&i.Degree,
			&i.FieldOfStudy,
			&i.StartDate,
			&i.EndDate,
			&i.Current,
			&i.Grade,
			&i.Achievements,
			&i.Skills,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEducation = `-- name: UpdateEducation :one
UPDATE educations SET
    school = $2,
    degree = $3,
    field_of_study = $4,
    start_date = $5,
    end_date = $6,
    current = $7,
    grade = $8,
    achievements = $9,
    skills = $10
WHERE education_id = $1
RETURNING education_id, user_id, school, degree, field_of_study, start_date, end_date, current, grade, achievements, skills
`

type UpdateEducationParams struct {
	EducationID  int64       `json:"education_id"`
	School       string      `json:"school"`
	Degree       string      `json:"degree"`
	FieldOfStudy string      `json:"field_of_study"`
	StartDate    pgtype.Date `json:"start_date"`
	EndDate      pgtype.Date `json:"end_date"`
	Current      bool        `json:"current"`
	Grade        string      `json:"grade"`
	Achievements string      `json:"achievements"`
	Skills       []string    `json:"skills"`
}

func (q *Queries) UpdateEducation(ctx context.Context, arg UpdateEducationParams) (Education, error) {
	row := q.db.QueryRow(ctx, updateEducation,
		arg.EducationID,
		arg.School,
		arg.Degree,
		arg.FieldOfStudy,
		arg.StartDate,
		arg.EndDate,
		arg.Current,
		arg.Grade,
		arg.Achievements,
		arg.Skills,
	)
	var i Education
	err := row.Scan(
		&i.EducationID,
		&i.UserID,
		&i.School,
		&i.Degree,
		&i.FieldOfStudy,
		&i.StartDate,
		&i.EndDate,
		&i.Current,
		&i.Grade,
		&i.Achievements,
		&i.Skills,
	)
	return i, err
}
