// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: featured_posts.sql

package db

import (
	"context"
	"time"
)

const featurePost = `-- name: FeaturePost :exec
INSERT INTO featured_posts (
    user_id,
    post_id
) VALUES (
    $1, $2
) RETURNING feature_post_id, post_id, user_id, created_at
`

type FeaturePostParams struct {
	UserID string `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) FeaturePost(ctx context.Context, arg FeaturePostParams) error {
	_, err := q.db.Exec(ctx, featurePost, arg.UserID, arg.PostID)
	return err
}

const isPostFeatured = `-- name: IsPostFeatured :one
SELECT
    CASE WHEN post_id IS NOT NULL THEN true ELSE false END AS is_featured
FROM featured_posts
WHERE post_id = $1
`

func (q *Queries) IsPostFeatured(ctx context.Context, postID int32) (bool, error) {
	row := q.db.QueryRow(ctx, isPostFeatured, postID)
	var is_featured bool
	err := row.Scan(&is_featured)
	return is_featured, err
}

const listFeaturedPosts = `-- name: ListFeaturedPosts :many
SELECT
    featured_posts.feature_post_id,
    posts.post_id, posts.owner_id, posts.content, posts.media, posts.post_type, posts.poll_id, posts.created_at,
    featured_posts.created_at
FROM
    featured_posts
JOIN
    posts ON featured_posts.post_id = posts.post_id
ORDER BY
    featured_posts.created_at DESC
`

type ListFeaturedPostsRow struct {
	FeaturePostID int32     `json:"feature_post_id"`
	Post          Post      `json:"post"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) ListFeaturedPosts(ctx context.Context) ([]ListFeaturedPostsRow, error) {
	rows, err := q.db.Query(ctx, listFeaturedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFeaturedPostsRow{}
	for rows.Next() {
		var i ListFeaturedPostsRow
		if err := rows.Scan(
			&i.FeaturePostID,
			&i.Post.PostID,
			&i.Post.OwnerID,
			&i.Post.Content,
			&i.Post.Media,
			&i.Post.PostType,
			&i.Post.PollID,
			&i.Post.CreatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unFeaturePost = `-- name: UnFeaturePost :exec
DELETE FROM featured_posts
WHERE
    user_id = $1 AND post_id = $2
`

type UnFeaturePostParams struct {
	UserID string `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) UnFeaturePost(ctx context.Context, arg UnFeaturePostParams) error {
	_, err := q.db.Exec(ctx, unFeaturePost, arg.UserID, arg.PostID)
	return err
}
