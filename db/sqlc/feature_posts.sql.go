// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feature_posts.sql

package db

import (
	"context"
	"time"
)

const listFeaturePosts = `-- name: ListFeaturePosts :many
SELECT
    feature_posts.feature_post_id,
    posts.post_id, posts.owner_id, posts.content, posts.media, posts.post_type, posts.poll_id, posts.created_at,
    feature_posts.created_at
FROM
    feature_posts
JOIN
    posts ON feature_posts.post_id = posts.post_id
ORDER BY
    feature_posts.created_at DESC
`

type ListFeaturePostsRow struct {
	FeaturePostID int32     `json:"feature_post_id"`
	Post          Post      `json:"post"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) ListFeaturePosts(ctx context.Context) ([]ListFeaturePostsRow, error) {
	rows, err := q.db.Query(ctx, listFeaturePosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFeaturePostsRow{}
	for rows.Next() {
		var i ListFeaturePostsRow
		if err := rows.Scan(
			&i.FeaturePostID,
			&i.Post.PostID,
			&i.Post.OwnerID,
			&i.Post.Content,
			&i.Post.Media,
			&i.Post.PostType,
			&i.Post.PollID,
			&i.Post.CreatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveFeaturePost = `-- name: SaveFeaturePost :exec
INSERT INTO feature_posts (
    user_id,
    post_id
) VALUES (
    $1, $2
) RETURNING feature_post_id, post_id, user_id, created_at
`

type SaveFeaturePostParams struct {
	UserID string `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) SaveFeaturePost(ctx context.Context, arg SaveFeaturePostParams) error {
	_, err := q.db.Exec(ctx, saveFeaturePost, arg.UserID, arg.PostID)
	return err
}

const unSaveFeaturePost = `-- name: UnSaveFeaturePost :exec
DELETE FROM feature_posts
WHERE
    user_id = $1 AND post_id = $2
`

type UnSaveFeaturePostParams struct {
	UserID string `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) UnSaveFeaturePost(ctx context.Context, arg UnSaveFeaturePostParams) error {
	_, err := q.db.Exec(ctx, unSaveFeaturePost, arg.UserID, arg.PostID)
	return err
}
