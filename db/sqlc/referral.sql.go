// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: referral.sql

package db

import (
	"context"
	"time"
)

const changeReferralStatus = `-- name: ChangeReferralStatus :one
UPDATE referrals
SET status = $2
WHERE referral_id = $1
RETURNING referral_id, referred_user_id, referrer_user_id, title, preferred_practice_area, preferred_practice_location, case_description, status, created_at, updated_at
`

type ChangeReferralStatusParams struct {
	ReferralID int32           `json:"referral_id"`
	Status     ReferralsStatus `json:"status"`
}

func (q *Queries) ChangeReferralStatus(ctx context.Context, arg ChangeReferralStatusParams) (Referral, error) {
	row := q.db.QueryRow(ctx, changeReferralStatus, arg.ReferralID, arg.Status)
	var i Referral
	err := row.Scan(
		&i.ReferralID,
		&i.ReferredUserID,
		&i.ReferrerUserID,
		&i.Title,
		&i.PreferredPracticeArea,
		&i.PreferredPracticeLocation,
		&i.CaseDescription,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createReferral = `-- name: CreateReferral :one
INSERT INTO referrals (
    referred_user_id,
    referrer_user_id,
    title,
    preferred_practice_area,
    preferred_practice_location,
    case_description
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING referral_id, referred_user_id, referrer_user_id, title, preferred_practice_area, preferred_practice_location, case_description, status, created_at, updated_at
`

type CreateReferralParams struct {
	ReferredUserID            string `json:"referred_user_id"`
	ReferrerUserID            string `json:"referrer_user_id"`
	Title                     string `json:"title"`
	PreferredPracticeArea     string `json:"preferred_practice_area"`
	PreferredPracticeLocation string `json:"preferred_practice_location"`
	CaseDescription           string `json:"case_description"`
}

func (q *Queries) CreateReferral(ctx context.Context, arg CreateReferralParams) (Referral, error) {
	row := q.db.QueryRow(ctx, createReferral,
		arg.ReferredUserID,
		arg.ReferrerUserID,
		arg.Title,
		arg.PreferredPracticeArea,
		arg.PreferredPracticeLocation,
		arg.CaseDescription,
	)
	var i Referral
	err := row.Scan(
		&i.ReferralID,
		&i.ReferredUserID,
		&i.ReferrerUserID,
		&i.Title,
		&i.PreferredPracticeArea,
		&i.PreferredPracticeLocation,
		&i.CaseDescription,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveReferrals = `-- name: ListActiveReferrals :many
SELECT referral_id, referred_user_id, referrer_user_id, title, preferred_practice_area, preferred_practice_location, case_description, status, created_at, updated_at FROM referrals
WHERE referrer_user_id = $1::text AND status = 'active'
ORDER BY created_at DESC
`

func (q *Queries) ListActiveReferrals(ctx context.Context, userID string) ([]Referral, error) {
	rows, err := q.db.Query(ctx, listActiveReferrals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Referral{}
	for rows.Next() {
		var i Referral
		if err := rows.Scan(
			&i.ReferralID,
			&i.ReferredUserID,
			&i.ReferrerUserID,
			&i.Title,
			&i.PreferredPracticeArea,
			&i.PreferredPracticeLocation,
			&i.CaseDescription,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProposals = `-- name: ListProposals :many
SELECT
    u.user_id AS referrer_user_id,
    u.first_name AS referrer_first_name,
    u.last_name AS referrer_last_name,
    u.practice_area AS referrer_practice_area,
    u.practice_location AS referrer_practice_location,
    u.avatar_url AS referrer_avatar_url,
    r.referral_id,
    r.title,
    r.preferred_practice_area,
    r.preferred_practice_location,
    r.case_description,
    r.created_at,
    r.updated_at
FROM
    referrals r
        JOIN
    users u
    ON
        r.referrer_user_id = u.user_id
WHERE
    r.referred_user_id = $1
`

type ListProposalsRow struct {
	ReferrerUserID            string    `json:"referrer_user_id"`
	ReferrerFirstName         string    `json:"referrer_first_name"`
	ReferrerLastName          string    `json:"referrer_last_name"`
	ReferrerPracticeArea      *string   `json:"referrer_practice_area"`
	ReferrerPracticeLocation  *string   `json:"referrer_practice_location"`
	ReferrerAvatarUrl         *string   `json:"referrer_avatar_url"`
	ReferralID                int32     `json:"referral_id"`
	Title                     string    `json:"title"`
	PreferredPracticeArea     string    `json:"preferred_practice_area"`
	PreferredPracticeLocation string    `json:"preferred_practice_location"`
	CaseDescription           string    `json:"case_description"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) ListProposals(ctx context.Context, referredUserID string) ([]ListProposalsRow, error) {
	rows, err := q.db.Query(ctx, listProposals, referredUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProposalsRow{}
	for rows.Next() {
		var i ListProposalsRow
		if err := rows.Scan(
			&i.ReferrerUserID,
			&i.ReferrerFirstName,
			&i.ReferrerLastName,
			&i.ReferrerPracticeArea,
			&i.ReferrerPracticeLocation,
			&i.ReferrerAvatarUrl,
			&i.ReferralID,
			&i.Title,
			&i.PreferredPracticeArea,
			&i.PreferredPracticeLocation,
			&i.CaseDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReferredUsers = `-- name: ListReferredUsers :many
SELECT
    u.user_id,
    u.first_name,
    u.last_name,
    u.avatar_url,
    u.practice_area,
    u.practice_location,
    u.average_billing_per_client

FROM
    referrals r
        JOIN
    users u
    ON
        r.referred_user_id = u.user_id
WHERE
    r.referral_id = $1
`

type ListReferredUsersRow struct {
	UserID                  string  `json:"user_id"`
	FirstName               string  `json:"first_name"`
	LastName                string  `json:"last_name"`
	AvatarUrl               *string `json:"avatar_url"`
	PracticeArea            *string `json:"practice_area"`
	PracticeLocation        *string `json:"practice_location"`
	AverageBillingPerClient *int32  `json:"average_billing_per_client"`
}

func (q *Queries) ListReferredUsers(ctx context.Context, referralID int32) ([]ListReferredUsersRow, error) {
	rows, err := q.db.Query(ctx, listReferredUsers, referralID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListReferredUsersRow{}
	for rows.Next() {
		var i ListReferredUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.AvatarUrl,
			&i.PracticeArea,
			&i.PracticeLocation,
			&i.AverageBillingPerClient,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
