// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: experience.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addExperience = `-- name: AddExperience :one
INSERT INTO experiences (
    user_id,
    title,
    practice_area,
    firm_id,
    practice_location,
    start_date,
    end_date,
    current,
    description,
    skills
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING experience_id, user_id, title, practice_area, firm_id, practice_location, start_date, end_date, current, description, skills
`

type AddExperienceParams struct {
	UserID           string      `json:"user_id"`
	Title            string      `json:"title"`
	PracticeArea     string      `json:"practice_area"`
	FirmID           int64       `json:"firm_id"`
	PracticeLocation string      `json:"practice_location"`
	StartDate        pgtype.Date `json:"start_date"`
	EndDate          pgtype.Date `json:"end_date"`
	Current          bool        `json:"current"`
	Description      string      `json:"description"`
	Skills           []string    `json:"skills"`
}

func (q *Queries) AddExperience(ctx context.Context, arg AddExperienceParams) (Experience, error) {
	row := q.db.QueryRow(ctx, addExperience,
		arg.UserID,
		arg.Title,
		arg.PracticeArea,
		arg.FirmID,
		arg.PracticeLocation,
		arg.StartDate,
		arg.EndDate,
		arg.Current,
		arg.Description,
		arg.Skills,
	)
	var i Experience
	err := row.Scan(
		&i.ExperienceID,
		&i.UserID,
		&i.Title,
		&i.PracticeArea,
		&i.FirmID,
		&i.PracticeLocation,
		&i.StartDate,
		&i.EndDate,
		&i.Current,
		&i.Description,
		&i.Skills,
	)
	return i, err
}
