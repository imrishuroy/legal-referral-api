// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package db

import (
	"context"
)

const getAccountInfo = `-- name: GetAccountInfo :one
SELECT
    user_id,
    first_name,
    last_name,
    avatar_url,
    practice_area
FROM users
WHERE user_id = $1
`

type GetAccountInfoRow struct {
	UserID       string  `json:"user_id"`
	FirstName    string  `json:"first_name"`
	LastName     string  `json:"last_name"`
	AvatarUrl    *string `json:"avatar_url"`
	PracticeArea *string `json:"practice_area"`
}

func (q *Queries) GetAccountInfo(ctx context.Context, userID string) (GetAccountInfoRow, error) {
	row := q.db.QueryRow(ctx, getAccountInfo, userID)
	var i GetAccountInfoRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
		&i.PracticeArea,
	)
	return i, err
}

const getConnectionsCount = `-- name: GetConnectionsCount :one
SELECT COUNT(*) AS connection_count
FROM connections
WHERE sender_id = $1 OR recipient_id = $1
`

func (q *Queries) GetConnectionsCount(ctx context.Context, senderID string) (int64, error) {
	row := q.db.QueryRow(ctx, getConnectionsCount, senderID)
	var connection_count int64
	err := row.Scan(&connection_count)
	return connection_count, err
}

const getFollowersCount = `-- name: GetFollowersCount :one
SELECT COUNT(*) AS follower_count
FROM connection_invitations
WHERE recipient_id = $1
  AND status NOT IN ('rejected', 'cancelled')
`

func (q *Queries) GetFollowersCount(ctx context.Context, recipientID string) (int64, error) {
	row := q.db.QueryRow(ctx, getFollowersCount, recipientID)
	var follower_count int64
	err := row.Scan(&follower_count)
	return follower_count, err
}

const getUserRatingInfo = `-- name: GetUserRatingInfo :one
SELECT
    AVG(rating) AS average_rating,
    COUNT(*) AS attorneys
FROM reviews
WHERE user_id = $1
`

type GetUserRatingInfoRow struct {
	AverageRating float64 `json:"average_rating"`
	Attorneys     int64   `json:"attorneys"`
}

func (q *Queries) GetUserRatingInfo(ctx context.Context, userID string) (GetUserRatingInfoRow, error) {
	row := q.db.QueryRow(ctx, getUserRatingInfo, userID)
	var i GetUserRatingInfoRow
	err := row.Scan(&i.AverageRating, &i.Attorneys)
	return i, err
}
