// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fetchUserProfile = `-- name: FetchUserProfile :one

SELECT
    users.user_id,
    users.first_name,
    users.last_name,
    users.practice_area,
    users.avatar_url,
    users.banner_url,
    users.average_billing_per_client,
    users.case_resolution_rate,
    users.open_to_referral,
    users.about,
    pricing.price_id,
    pricing.service_type,
    pricing.per_hour_price,
    pricing.per_hearing_price,
    pricing.contingency_price,
    pricing.hybrid_price,
    COALESCE((SELECT AVG(rating) FROM reviews WHERE user_id = users.user_id), 0.0) AS average_rating,
    COALESCE((SELECT COUNT(*) FROM reviews WHERE user_id = users.user_id), 0) AS attorneys,
    COALESCE((SELECT COUNT(*)
              FROM connection_invitations
              WHERE recipient_id = users.user_id
                AND status NOT IN ('rejected', 'cancelled')), 0) AS followers_count,
    COALESCE((SELECT COUNT(*)
              FROM connections
              WHERE sender_id = users.user_id OR recipient_id = users.user_id), 0) AS connections_count
FROM users
         LEFT JOIN pricing ON users.user_id = pricing.user_id
WHERE users.user_id = $1
`

type FetchUserProfileRow struct {
	UserID                  string         `json:"user_id"`
	FirstName               string         `json:"first_name"`
	LastName                string         `json:"last_name"`
	PracticeArea            *string        `json:"practice_area"`
	AvatarUrl               *string        `json:"avatar_url"`
	BannerUrl               *string        `json:"banner_url"`
	AverageBillingPerClient *int32         `json:"average_billing_per_client"`
	CaseResolutionRate      *int32         `json:"case_resolution_rate"`
	OpenToReferral          bool           `json:"open_to_referral"`
	About                   *string        `json:"about"`
	PriceID                 *int64         `json:"price_id"`
	ServiceType             *string        `json:"service_type"`
	PerHourPrice            pgtype.Numeric `json:"per_hour_price"`
	PerHearingPrice         pgtype.Numeric `json:"per_hearing_price"`
	ContingencyPrice        *string        `json:"contingency_price"`
	HybridPrice             *string        `json:"hybrid_price"`
	AverageRating           interface{}    `json:"average_rating"`
	Attorneys               interface{}    `json:"attorneys"`
	FollowersCount          interface{}    `json:"followers_count"`
	ConnectionsCount        interface{}    `json:"connections_count"`
}

func (q *Queries) FetchUserProfile(ctx context.Context, userID string) (FetchUserProfileRow, error) {
	row := q.db.QueryRow(ctx, fetchUserProfile, userID)
	var i FetchUserProfileRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PracticeArea,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.About,
		&i.PriceID,
		&i.ServiceType,
		&i.PerHourPrice,
		&i.PerHearingPrice,
		&i.ContingencyPrice,
		&i.HybridPrice,
		&i.AverageRating,
		&i.Attorneys,
		&i.FollowersCount,
		&i.ConnectionsCount,
	)
	return i, err
}

const toggleOpenToRefferal = `-- name: ToggleOpenToRefferal :exec
UPDATE users
SET open_to_referral = $2
WHERE user_id = $1
`

type ToggleOpenToRefferalParams struct {
	UserID         string `json:"user_id"`
	OpenToReferral bool   `json:"open_to_referral"`
}

func (q *Queries) ToggleOpenToRefferal(ctx context.Context, arg ToggleOpenToRefferalParams) error {
	_, err := q.db.Exec(ctx, toggleOpenToRefferal, arg.UserID, arg.OpenToReferral)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
SET avatar_url = $2
WHERE user_id = $1
`

type UpdateUserAvatarParams struct {
	UserID    string  `json:"user_id"`
	AvatarUrl *string `json:"avatar_url"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.UserID, arg.AvatarUrl)
	return err
}
