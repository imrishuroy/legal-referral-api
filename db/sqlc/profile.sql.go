// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: profile.sql

package db

import (
	"context"
)

const fetchUserProfile = `-- name: FetchUserProfile :many
SELECT users.user_id, users.email, users.first_name, users.last_name, users.about, users.mobile, users.address, users.image_url, users.email_verified, users.mobile_verified, users.wizard_step, users.wizard_completed, users.signup_method, users.practice_area, users.practice_location, users.experience, users.average_billing_per_client, users.case_resolution_rate, users.open_to_referral, users.join_date, pricing.price_id, pricing.user_id, pricing.service_type, pricing.per_hour_price, pricing.per_hearing_price, pricing.contingency_price, pricing.hybrid_price
FROM users
JOIN pricing ON pricing.user_id = users.user_id
WHERE users.user_id = $1
`

type FetchUserProfileRow struct {
	User    User    `json:"user"`
	Pricing Pricing `json:"pricing"`
}

func (q *Queries) FetchUserProfile(ctx context.Context, userID string) ([]FetchUserProfileRow, error) {
	rows, err := q.db.Query(ctx, fetchUserProfile, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchUserProfileRow{}
	for rows.Next() {
		var i FetchUserProfileRow
		if err := rows.Scan(
			&i.User.UserID,
			&i.User.Email,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.About,
			&i.User.Mobile,
			&i.User.Address,
			&i.User.ImageUrl,
			&i.User.EmailVerified,
			&i.User.MobileVerified,
			&i.User.WizardStep,
			&i.User.WizardCompleted,
			&i.User.SignupMethod,
			&i.User.PracticeArea,
			&i.User.PracticeLocation,
			&i.User.Experience,
			&i.User.AverageBillingPerClient,
			&i.User.CaseResolutionRate,
			&i.User.OpenToReferral,
			&i.User.JoinDate,
			&i.Pricing.PriceID,
			&i.Pricing.UserID,
			&i.Pricing.ServiceType,
			&i.Pricing.PerHourPrice,
			&i.Pricing.PerHearingPrice,
			&i.Pricing.ContingencyPrice,
			&i.Pricing.HybridPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
