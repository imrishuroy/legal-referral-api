// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: faq.sql

package db

import (
	"context"
)

const createFAQ = `-- name: CreateFAQ :one
INSERT INTO faqs (
    question,
    answer
) VALUES (
    $1, $2
) RETURNING faq_id, question, answer, created_at
`

type CreateFAQParams struct {
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) CreateFAQ(ctx context.Context, arg CreateFAQParams) (Faq, error) {
	row := q.db.QueryRow(ctx, createFAQ, arg.Question, arg.Answer)
	var i Faq
	err := row.Scan(
		&i.FaqID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
	)
	return i, err
}

const listFAQs = `-- name: ListFAQs :many
SELECT faq_id, question, answer, created_at
FROM faqs
ORDER BY created_at ASC
`

func (q *Queries) ListFAQs(ctx context.Context) ([]Faq, error) {
	rows, err := q.db.Query(ctx, listFAQs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Faq{}
	for rows.Next() {
		var i Faq
		if err := rows.Scan(
			&i.FaqID,
			&i.Question,
			&i.Answer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
