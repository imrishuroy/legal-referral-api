// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: news_feed.sql

package db

import (
	"context"
	"time"
)

const listNewsFeed = `-- name: ListNewsFeed :many
SELECT
    u.user_id,
    u.first_name,
    u.last_name,
    u.avatar_url,
    p.post_id,
    p.title,
    p.content,
    p.media,
    p.post_type,
    p.created_at
FROM news_feed nf
    JOIN users u ON nf.user_id = u.user_id
    JOIN posts p ON nf.post_id = p.post_id
WHERE nf.user_id = $1
ORDER BY nf.created_at DESC
`

type ListNewsFeedRow struct {
	UserID    string    `json:"user_id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	AvatarUrl *string   `json:"avatar_url"`
	PostID    int32     `json:"post_id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	Media     []string  `json:"media"`
	PostType  PostType  `json:"post_type"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListNewsFeed(ctx context.Context, userID string) ([]ListNewsFeedRow, error) {
	rows, err := q.db.Query(ctx, listNewsFeed, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNewsFeedRow{}
	for rows.Next() {
		var i ListNewsFeedRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.AvatarUrl,
			&i.PostID,
			&i.Title,
			&i.Content,
			&i.Media,
			&i.PostType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNewsFeed2 = `-- name: ListNewsFeed2 :many
SELECT nf.feed_id, users.user_id, users.email, users.first_name, users.last_name, users.about, users.mobile, users.address, users.avatar_url, users.banner_url, users.email_verified, users.mobile_verified, users.wizard_step, users.wizard_completed, users.signup_method, users.practice_area, users.practice_location, users.experience, users.average_billing_per_client, users.case_resolution_rate, users.open_to_referral, users.join_date, posts.post_id, posts.owner_id, posts.title, posts.content, posts.media, posts.post_type, posts.poll_id, posts.created_at, nf.created_at
FROM users
         JOIN news_feed nf ON nf.user_id = users.user_id
         JOIN posts ON nf.post_id = posts.post_id
WHERE nf.user_id = $1
ORDER BY nf.created_at DESC
`

type ListNewsFeed2Row struct {
	FeedID    int32     `json:"feed_id"`
	User      User      `json:"user"`
	Post      Post      `json:"post"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListNewsFeed2(ctx context.Context, userID string) ([]ListNewsFeed2Row, error) {
	rows, err := q.db.Query(ctx, listNewsFeed2, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNewsFeed2Row{}
	for rows.Next() {
		var i ListNewsFeed2Row
		if err := rows.Scan(
			&i.FeedID,
			&i.User.UserID,
			&i.User.Email,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.About,
			&i.User.Mobile,
			&i.User.Address,
			&i.User.AvatarUrl,
			&i.User.BannerUrl,
			&i.User.EmailVerified,
			&i.User.MobileVerified,
			&i.User.WizardStep,
			&i.User.WizardCompleted,
			&i.User.SignupMethod,
			&i.User.PracticeArea,
			&i.User.PracticeLocation,
			&i.User.Experience,
			&i.User.AverageBillingPerClient,
			&i.User.CaseResolutionRate,
			&i.User.OpenToReferral,
			&i.User.JoinDate,
			&i.Post.PostID,
			&i.Post.OwnerID,
			&i.Post.Title,
			&i.Post.Content,
			&i.Post.Media,
			&i.Post.PostType,
			&i.Post.PollID,
			&i.Post.CreatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postToNewsFeed = `-- name: PostToNewsFeed :exec
INSERT INTO news_feed (
    user_id,
    post_id
) VALUES (
    $1, $2
)
`

type PostToNewsFeedParams struct {
	UserID string `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) PostToNewsFeed(ctx context.Context, arg PostToNewsFeedParams) error {
	_, err := q.db.Exec(ctx, postToNewsFeed, arg.UserID, arg.PostID)
	return err
}
