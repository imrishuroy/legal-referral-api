// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: news_feed.sql

package db

import (
	"context"
	"time"
)

const listNewsFeed = `-- name: ListNewsFeed :many
SELECT
    nf.feed_id,
    post_owner.user_id, post_owner.email, post_owner.first_name, post_owner.last_name, post_owner.about, post_owner.mobile, post_owner.address, post_owner.avatar_url, post_owner.banner_url, post_owner.email_verified, post_owner.mobile_verified, post_owner.wizard_step, post_owner.wizard_completed, post_owner.signup_method, post_owner.practice_area, post_owner.practice_location, post_owner.experience, post_owner.average_billing_per_client, post_owner.case_resolution_rate, post_owner.open_to_referral, post_owner.license_verified, post_owner.join_date,
    posts.post_id, posts.owner_id, posts.content, posts.media, posts.post_type, posts.poll_id, posts.created_at,
    nf.created_at,
    COALESCE(likes_counts.likes_count, 0) AS likes_count,
    COALESCE(comments_counts.comments_count, 0) AS comments_count,
    CASE WHEN user_likes.like_id IS NOT NULL THEN true ELSE false END AS is_liked
FROM news_feed nf
         JOIN posts ON nf.post_id = posts.post_id
         JOIN users post_owner ON posts.owner_id = post_owner.user_id -- Join with post owner
         LEFT JOIN (
    SELECT
        post_id,
        COUNT(*) AS likes_count
    FROM likes
    WHERE type = 'post'
    GROUP BY post_id
) likes_counts ON nf.post_id = likes_counts.post_id
         LEFT JOIN (
    SELECT
        post_id,
        COUNT(*) AS comments_count
    FROM comments
    GROUP BY post_id
) comments_counts ON nf.post_id = comments_counts.post_id
         LEFT JOIN (
    SELECT
        like_id,
        post_id
    FROM likes
    WHERE likes.user_id = $1 AND type = 'post'
) user_likes ON nf.post_id = user_likes.post_id
WHERE nf.user_id = $1
ORDER BY nf.created_at DESC
LIMIT $2
OFFSET $3
`

type ListNewsFeedParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListNewsFeedRow struct {
	FeedID        int32     `json:"feed_id"`
	User          User      `json:"user"`
	Post          Post      `json:"post"`
	CreatedAt     time.Time `json:"created_at"`
	LikesCount    int64     `json:"likes_count"`
	CommentsCount int64     `json:"comments_count"`
	IsLiked       bool      `json:"is_liked"`
}

func (q *Queries) ListNewsFeed(ctx context.Context, arg ListNewsFeedParams) ([]ListNewsFeedRow, error) {
	rows, err := q.db.Query(ctx, listNewsFeed, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNewsFeedRow{}
	for rows.Next() {
		var i ListNewsFeedRow
		if err := rows.Scan(
			&i.FeedID,
			&i.User.UserID,
			&i.User.Email,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.About,
			&i.User.Mobile,
			&i.User.Address,
			&i.User.AvatarUrl,
			&i.User.BannerUrl,
			&i.User.EmailVerified,
			&i.User.MobileVerified,
			&i.User.WizardStep,
			&i.User.WizardCompleted,
			&i.User.SignupMethod,
			&i.User.PracticeArea,
			&i.User.PracticeLocation,
			&i.User.Experience,
			&i.User.AverageBillingPerClient,
			&i.User.CaseResolutionRate,
			&i.User.OpenToReferral,
			&i.User.LicenseVerified,
			&i.User.JoinDate,
			&i.Post.PostID,
			&i.Post.OwnerID,
			&i.Post.Content,
			&i.Post.Media,
			&i.Post.PostType,
			&i.Post.PollID,
			&i.Post.CreatedAt,
			&i.CreatedAt,
			&i.LikesCount,
			&i.CommentsCount,
			&i.IsLiked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postToNewsFeed = `-- name: PostToNewsFeed :exec
INSERT INTO news_feed (
    user_id,
    post_id
) VALUES (
    $1, $2
)
`

type PostToNewsFeedParams struct {
	UserID string `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) PostToNewsFeed(ctx context.Context, arg PostToNewsFeedParams) error {
	_, err := q.db.Exec(ctx, postToNewsFeed, arg.UserID, arg.PostID)
	return err
}
