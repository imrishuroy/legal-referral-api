// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    parent_message_id,
    sender_id,
    recipient_id,
    message,
    has_attachment,
    attachment_id,
    is_read,
    room_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING message_id, parent_message_id, sender_id, recipient_id, message, has_attachment, attachment_id, is_read, room_id, sent_at
`

type CreateMessageParams struct {
	ParentMessageID *int32 `json:"parent_message_id"`
	SenderID        string `json:"sender_id"`
	RecipientID     string `json:"recipient_id"`
	Message         string `json:"message"`
	HasAttachment   bool   `json:"has_attachment"`
	AttachmentID    *int32 `json:"attachment_id"`
	IsRead          bool   `json:"is_read"`
	RoomID          string `json:"room_id"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ParentMessageID,
		arg.SenderID,
		arg.RecipientID,
		arg.Message,
		arg.HasAttachment,
		arg.AttachmentID,
		arg.IsRead,
		arg.RoomID,
	)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.ParentMessageID,
		&i.SenderID,
		&i.RecipientID,
		&i.Message,
		&i.HasAttachment,
		&i.AttachmentID,
		&i.IsRead,
		&i.RoomID,
		&i.SentAt,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT message_id, parent_message_id, sender_id, recipient_id, message, has_attachment, attachment_id, is_read, room_id, sent_at FROM messages
WHERE room_id = $1
`

func (q *Queries) ListMessages(ctx context.Context, roomID string) ([]Message, error) {
	rows, err := q.db.Query(ctx, listMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.ParentMessageID,
			&i.SenderID,
			&i.RecipientID,
			&i.Message,
			&i.HasAttachment,
			&i.AttachmentID,
			&i.IsRead,
			&i.RoomID,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
