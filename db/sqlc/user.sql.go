// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id,
    email,
    mobile,
    first_name,
    last_name,
    signup_method,
    email_verified,
    mobile_verified,
    avatar_url
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type CreateUserParams struct {
	UserID         string  `json:"user_id"`
	Email          string  `json:"email"`
	Mobile         *string `json:"mobile"`
	FirstName      string  `json:"first_name"`
	LastName       string  `json:"last_name"`
	SignupMethod   int32   `json:"signup_method"`
	EmailVerified  bool    `json:"email_verified"`
	MobileVerified bool    `json:"mobile_verified"`
	AvatarUrl      *string `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Mobile,
		arg.FirstName,
		arg.LastName,
		arg.SignupMethod,
		arg.EmailVerified,
		arg.MobileVerified,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const getUserWizardStep = `-- name: GetUserWizardStep :one
SELECT wizard_step
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserWizardStep(ctx context.Context, userID string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserWizardStep, userID)
	var wizard_step int32
	err := row.Scan(&wizard_step)
	return wizard_step, err
}

const markWizardCompleted = `-- name: MarkWizardCompleted :one
UPDATE users
SET
    wizard_completed = $2
WHERE
    user_id = $1
RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type MarkWizardCompletedParams struct {
	UserID          string `json:"user_id"`
	WizardCompleted bool   `json:"wizard_completed"`
}

func (q *Queries) MarkWizardCompleted(ctx context.Context, arg MarkWizardCompletedParams) (User, error) {
	row := q.db.QueryRow(ctx, markWizardCompleted, arg.UserID, arg.WizardCompleted)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const saveAboutYou = `-- name: SaveAboutYou :one
UPDATE users
SET
    address = $2,
    practice_area = $3,
    practice_location = $4,
    experience = $5,
    wizard_completed = $6
WHERE
    user_id = $1
RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type SaveAboutYouParams struct {
	UserID           string  `json:"user_id"`
	Address          *string `json:"address"`
	PracticeArea     *string `json:"practice_area"`
	PracticeLocation *string `json:"practice_location"`
	Experience       *string `json:"experience"`
	WizardCompleted  bool    `json:"wizard_completed"`
}

func (q *Queries) SaveAboutYou(ctx context.Context, arg SaveAboutYouParams) (User, error) {
	row := q.db.QueryRow(ctx, saveAboutYou,
		arg.UserID,
		arg.Address,
		arg.PracticeArea,
		arg.PracticeLocation,
		arg.Experience,
		arg.WizardCompleted,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const updateEmailVerificationStatus = `-- name: UpdateEmailVerificationStatus :one
UPDATE users
SET
    email_verified = $2
WHERE
    user_id = $1
RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type UpdateEmailVerificationStatusParams struct {
	UserID        string `json:"user_id"`
	EmailVerified bool   `json:"email_verified"`
}

func (q *Queries) UpdateEmailVerificationStatus(ctx context.Context, arg UpdateEmailVerificationStatusParams) (User, error) {
	row := q.db.QueryRow(ctx, updateEmailVerificationStatus, arg.UserID, arg.EmailVerified)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const updateMobileVerificationStatus = `-- name: UpdateMobileVerificationStatus :one
UPDATE users
SET
    mobile = $2,
    mobile_verified = $3
WHERE
    user_id = $1
RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type UpdateMobileVerificationStatusParams struct {
	UserID         string  `json:"user_id"`
	Mobile         *string `json:"mobile"`
	MobileVerified bool    `json:"mobile_verified"`
}

func (q *Queries) UpdateMobileVerificationStatus(ctx context.Context, arg UpdateMobileVerificationStatusParams) (User, error) {
	row := q.db.QueryRow(ctx, updateMobileVerificationStatus, arg.UserID, arg.Mobile, arg.MobileVerified)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const updateUserAvatarUrl = `-- name: UpdateUserAvatarUrl :one
UPDATE users
SET
    avatar_url = $2
WHERE
    user_id = $1
RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type UpdateUserAvatarUrlParams struct {
	UserID    string  `json:"user_id"`
	AvatarUrl *string `json:"avatar_url"`
}

func (q *Queries) UpdateUserAvatarUrl(ctx context.Context, arg UpdateUserAvatarUrlParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserAvatarUrl, arg.UserID, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const updateUserBannerImage = `-- name: UpdateUserBannerImage :exec
UPDATE users
SET
    banner_url = $2
WHERE
    user_id = $1
`

type UpdateUserBannerImageParams struct {
	UserID    string  `json:"user_id"`
	BannerUrl *string `json:"banner_url"`
}

func (q *Queries) UpdateUserBannerImage(ctx context.Context, arg UpdateUserBannerImageParams) error {
	_, err := q.db.Exec(ctx, updateUserBannerImage, arg.UserID, arg.BannerUrl)
	return err
}

const updateUserInfo = `-- name: UpdateUserInfo :one
UPDATE users
SET
    first_name = $2,
    last_name = $3,
    average_billing_per_client = $4,
    case_resolution_rate = $5,
    about = $6
WHERE
    user_id = $1
RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type UpdateUserInfoParams struct {
	UserID                  string  `json:"user_id"`
	FirstName               string  `json:"first_name"`
	LastName                string  `json:"last_name"`
	AverageBillingPerClient *int32  `json:"average_billing_per_client"`
	CaseResolutionRate      *int32  `json:"case_resolution_rate"`
	About                   *string `json:"about"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserInfo,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.AverageBillingPerClient,
		arg.CaseResolutionRate,
		arg.About,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}

const updateUserWizardStep = `-- name: UpdateUserWizardStep :one
UPDATE users
SET
    wizard_step = $2
WHERE
    user_id = $1
RETURNING user_id, email, first_name, last_name, about, mobile, address, avatar_url, banner_url, email_verified, mobile_verified, wizard_step, wizard_completed, signup_method, practice_area, practice_location, experience, average_billing_per_client, case_resolution_rate, open_to_referral, join_date
`

type UpdateUserWizardStepParams struct {
	UserID     string `json:"user_id"`
	WizardStep int32  `json:"wizard_step"`
}

func (q *Queries) UpdateUserWizardStep(ctx context.Context, arg UpdateUserWizardStepParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserWizardStep, arg.UserID, arg.WizardStep)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.About,
		&i.Mobile,
		&i.Address,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.EmailVerified,
		&i.MobileVerified,
		&i.WizardStep,
		&i.WizardCompleted,
		&i.SignupMethod,
		&i.PracticeArea,
		&i.PracticeLocation,
		&i.Experience,
		&i.AverageBillingPerClient,
		&i.CaseResolutionRate,
		&i.OpenToReferral,
		&i.JoinDate,
	)
	return i, err
}
