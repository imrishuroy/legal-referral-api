// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: firm.sql

package db

import (
	"context"
)

const addFirm = `-- name: AddFirm :one
INSERT INTO firms (
    name,
    owner_user_id,
    logo_url,
    org_type,
    website,
    location,
    about
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)RETURNING firm_id, owner_user_id, name, logo_url, org_type, website, location, about, created_at
`

type AddFirmParams struct {
	Name        string `json:"name"`
	OwnerUserID string `json:"owner_user_id"`
	LogoUrl     string `json:"logo_url"`
	OrgType     string `json:"org_type"`
	Website     string `json:"website"`
	Location    string `json:"location"`
	About       string `json:"about"`
}

func (q *Queries) AddFirm(ctx context.Context, arg AddFirmParams) (Firm, error) {
	row := q.db.QueryRow(ctx, addFirm,
		arg.Name,
		arg.OwnerUserID,
		arg.LogoUrl,
		arg.OrgType,
		arg.Website,
		arg.Location,
		arg.About,
	)
	var i Firm
	err := row.Scan(
		&i.FirmID,
		&i.OwnerUserID,
		&i.Name,
		&i.LogoUrl,
		&i.OrgType,
		&i.Website,
		&i.Location,
		&i.About,
		&i.CreatedAt,
	)
	return i, err
}

const getFirm = `-- name: GetFirm :one
SELECT firm_id, owner_user_id, name, logo_url, org_type, website, location, about, created_at FROM firms
WHERE firm_id = $1
`

func (q *Queries) GetFirm(ctx context.Context, firmID int64) (Firm, error) {
	row := q.db.QueryRow(ctx, getFirm, firmID)
	var i Firm
	err := row.Scan(
		&i.FirmID,
		&i.OwnerUserID,
		&i.Name,
		&i.LogoUrl,
		&i.OrgType,
		&i.Website,
		&i.Location,
		&i.About,
		&i.CreatedAt,
	)
	return i, err
}

const listFirms = `-- name: ListFirms :many
SELECT firm_id, owner_user_id, name, logo_url, org_type, website, location, about, created_at FROM firms
WHERE $3::text = '' OR name ILIKE '%' || $3 || '%'
ORDER BY firm_id
LIMIT $1
OFFSET $2
`

type ListFirmsParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Query  string `json:"query"`
}

func (q *Queries) ListFirms(ctx context.Context, arg ListFirmsParams) ([]Firm, error) {
	rows, err := q.db.Query(ctx, listFirms, arg.Limit, arg.Offset, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Firm{}
	for rows.Next() {
		var i Firm
		if err := rows.Scan(
			&i.FirmID,
			&i.OwnerUserID,
			&i.Name,
			&i.LogoUrl,
			&i.OrgType,
			&i.Website,
			&i.Location,
			&i.About,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFirmsByOwner = `-- name: ListFirmsByOwner :many
SELECT firm_id, owner_user_id, name, logo_url, org_type, website, location, about, created_at FROM firms
WHERE owner_user_id = $1
`

func (q *Queries) ListFirmsByOwner(ctx context.Context, ownerUserID string) ([]Firm, error) {
	rows, err := q.db.Query(ctx, listFirmsByOwner, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Firm{}
	for rows.Next() {
		var i Firm
		if err := rows.Scan(
			&i.FirmID,
			&i.OwnerUserID,
			&i.Name,
			&i.LogoUrl,
			&i.OrgType,
			&i.Website,
			&i.Location,
			&i.About,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
