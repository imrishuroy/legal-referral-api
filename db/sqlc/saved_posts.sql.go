// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: saved_posts.sql

package db

import (
	"context"
	"time"
)

const listSavedPosts = `-- name: ListSavedPosts :many
SELECT
    saved_posts.saved_post_id,
    posts.post_id, posts.owner_id, posts.content, posts.media, posts.post_type, posts.poll_id, posts.created_at,
    users.user_id, users.email, users.first_name, users.last_name, users.about, users.mobile, users.address, users.avatar_url, users.banner_url, users.email_verified, users.mobile_verified, users.wizard_step, users.wizard_completed, users.signup_method, users.practice_area, users.practice_location, users.experience, users.average_billing_per_client, users.case_resolution_rate, users.open_to_referral, users.license_verified, users.license_rejected, users.join_date,
    saved_posts.created_at
FROM
    saved_posts
JOIN
    posts ON saved_posts.post_id = posts.post_id
JOIN
    users ON posts.owner_id = users.user_id
WHERE
    saved_posts.user_id = $1
ORDER BY
    saved_posts.created_at DESC
`

type ListSavedPostsRow struct {
	SavedPostID int32     `json:"saved_post_id"`
	Post        Post      `json:"post"`
	User        User      `json:"user"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) ListSavedPosts(ctx context.Context, userID string) ([]ListSavedPostsRow, error) {
	rows, err := q.db.Query(ctx, listSavedPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSavedPostsRow{}
	for rows.Next() {
		var i ListSavedPostsRow
		if err := rows.Scan(
			&i.SavedPostID,
			&i.Post.PostID,
			&i.Post.OwnerID,
			&i.Post.Content,
			&i.Post.Media,
			&i.Post.PostType,
			&i.Post.PollID,
			&i.Post.CreatedAt,
			&i.User.UserID,
			&i.User.Email,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.About,
			&i.User.Mobile,
			&i.User.Address,
			&i.User.AvatarUrl,
			&i.User.BannerUrl,
			&i.User.EmailVerified,
			&i.User.MobileVerified,
			&i.User.WizardStep,
			&i.User.WizardCompleted,
			&i.User.SignupMethod,
			&i.User.PracticeArea,
			&i.User.PracticeLocation,
			&i.User.Experience,
			&i.User.AverageBillingPerClient,
			&i.User.CaseResolutionRate,
			&i.User.OpenToReferral,
			&i.User.LicenseVerified,
			&i.User.LicenseRejected,
			&i.User.JoinDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const savePost = `-- name: SavePost :exec
INSERT INTO saved_posts (
    user_id,
    post_id
) VALUES (
    $1, $2
)
`

type SavePostParams struct {
	UserID string `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) SavePost(ctx context.Context, arg SavePostParams) error {
	_, err := q.db.Exec(ctx, savePost, arg.UserID, arg.PostID)
	return err
}

const unsavePost = `-- name: UnsavePost :exec
DELETE FROM saved_posts
WHERE
    saved_post_id = $1
`

func (q *Queries) UnsavePost(ctx context.Context, savedPostID int32) error {
	_, err := q.db.Exec(ctx, unsavePost, savedPostID)
	return err
}
