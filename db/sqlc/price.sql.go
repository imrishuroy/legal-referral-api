// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: price.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPrice = `-- name: AddPrice :one
INSERT INTO pricing (
    user_id,
    service_type,
    per_hour_price,
    per_hearing_price,
    contingency_price,
    hybrid_price
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING price_id, user_id, service_type, per_hour_price, per_hearing_price, contingency_price, hybrid_price
`

type AddPriceParams struct {
	UserID           string         `json:"user_id"`
	ServiceType      string         `json:"service_type"`
	PerHourPrice     pgtype.Numeric `json:"per_hour_price"`
	PerHearingPrice  pgtype.Numeric `json:"per_hearing_price"`
	ContingencyPrice *string        `json:"contingency_price"`
	HybridPrice      *string        `json:"hybrid_price"`
}

func (q *Queries) AddPrice(ctx context.Context, arg AddPriceParams) (Pricing, error) {
	row := q.db.QueryRow(ctx, addPrice,
		arg.UserID,
		arg.ServiceType,
		arg.PerHourPrice,
		arg.PerHearingPrice,
		arg.ContingencyPrice,
		arg.HybridPrice,
	)
	var i Pricing
	err := row.Scan(
		&i.PriceID,
		&i.UserID,
		&i.ServiceType,
		&i.PerHourPrice,
		&i.PerHearingPrice,
		&i.ContingencyPrice,
		&i.HybridPrice,
	)
	return i, err
}

const updatePrice = `-- name: UpdatePrice :one
UPDATE pricing SET
    service_type = $2,
    per_hour_price = $3,
    per_hearing_price = $4,
    contingency_price = $5,
    hybrid_price = $6
WHERE
    price_id = $1
RETURNING price_id, user_id, service_type, per_hour_price, per_hearing_price, contingency_price, hybrid_price
`

type UpdatePriceParams struct {
	PriceID          int64          `json:"price_id"`
	ServiceType      string         `json:"service_type"`
	PerHourPrice     pgtype.Numeric `json:"per_hour_price"`
	PerHearingPrice  pgtype.Numeric `json:"per_hearing_price"`
	ContingencyPrice *string        `json:"contingency_price"`
	HybridPrice      *string        `json:"hybrid_price"`
}

func (q *Queries) UpdatePrice(ctx context.Context, arg UpdatePriceParams) (Pricing, error) {
	row := q.db.QueryRow(ctx, updatePrice,
		arg.PriceID,
		arg.ServiceType,
		arg.PerHourPrice,
		arg.PerHearingPrice,
		arg.ContingencyPrice,
		arg.HybridPrice,
	)
	var i Pricing
	err := row.Scan(
		&i.PriceID,
		&i.UserID,
		&i.ServiceType,
		&i.PerHourPrice,
		&i.PerHearingPrice,
		&i.ContingencyPrice,
		&i.HybridPrice,
	)
	return i, err
}
